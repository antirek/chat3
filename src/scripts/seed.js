import connectDB from '../config/database.js';
import { Tenant, User, Dialog, Message, Meta } from '../models/index.js';

async function seed() {
  try {
    await connectDB();

    console.log('üå± Starting database seeding...\n');

    // Clear existing data
    await Tenant.deleteMany({});
    await User.deleteMany({});
    await Dialog.deleteMany({});
    await Message.deleteMany({});
    await Meta.deleteMany({});

    console.log('‚úÖ Cleared existing data');

    // Create System Tenant
    const systemTenant = await Tenant.create({
      name: 'System',
      domain: 'system.chat3.internal',
      type: 'system',
      isActive: true,
      settings: {
        isSystem: true,
        maxUsers: 1000,
        features: ['all'],
      },
    });

    console.log(`‚úÖ Created system tenant: ${systemTenant.name}`);

    // Create System Bot User
    const systemBot = await User.create({
      tenantId: systemTenant._id,
      username: 'system_bot',
      email: 'bot@system.chat3.internal',
      password: 'system_bot_password_change_me',
      firstName: 'System',
      lastName: 'Bot',
      role: 'admin',
      type: 'bot',
      isActive: true,
    });

    console.log(`‚úÖ Created system bot: ${systemBot.username}`);

    // Create Demo Tenant
    const tenant = await Tenant.create({
      name: 'Demo Company',
      domain: 'demo.chat3.com',
      type: 'client',
      isActive: true,
      settings: {
        maxUsers: 100,
        features: ['chat', 'video', 'files'],
      },
    });

    console.log(`‚úÖ Created tenant: ${tenant.name}`);

    // Create Users
    const users = await User.create([
      {
        tenantId: tenant._id,
        username: 'admin',
        email: 'admin@demo.com',
        password: 'password123',
        firstName: '–ê–¥–º–∏–Ω',
        lastName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
        role: 'admin',
        type: 'user',
        isActive: true,
      },
      {
        tenantId: tenant._id,
        username: 'user1',
        email: 'user1@demo.com',
        password: 'password123',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        role: 'user',
        type: 'user',
        isActive: true,
      },
      {
        tenantId: tenant._id,
        username: 'user2',
        email: 'user2@demo.com',
        password: 'password123',
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–ü–µ—Ç—Ä–æ–≤–∞',
        role: 'user',
        type: 'user',
        isActive: true,
      },
    ]);

    console.log(`‚úÖ Created ${users.length} users`);

    // Create 100 Dialogs with different meta types and channelTypes
    const dialogNames = {
      internal: [
        '–û–±—â–∏–π —á–∞—Ç', '–ü—Ä–æ–µ–∫—Ç–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'HR –≤–æ–ø—Ä–æ—Å—ã', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', '–§–∏–Ω–∞–Ω—Å—ã', '–ü—Ä–æ–¥–∞–∂–∏', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
        '–î–∏–∑–∞–π–Ω', 'DevOps', 'QA', '–°—Ç—Ä–∞—Ç–µ–≥–∏—è', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–û—Ç—á–µ—Ç—ã',
        '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–û–±—É—á–µ–Ω–∏–µ', '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏'
      ],
      external: [
        '–ö–ª–∏–µ–Ω—Ç—ã', '–ü–∞—Ä—Ç–Ω–µ—Ä—ã', '–í–Ω–µ—à–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã', '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏', '–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã',
        '–ú–µ–¥–∏–∞', '–ü–æ–¥—Ä—è–¥—á–∏–∫–∏', '–ê–≥–µ–Ω—Ç—Å—Ç–≤–∞', '–ê—É–¥–∏—Ç–æ—Ä—ã', '–Æ—Ä–∏—Å—Ç—ã'
      ]
    };

    const channelTypes = ['whatsapp', 'telegram'];
    const dialogs = [];
    
    // –°–æ–∑–¥–∞–µ–º 100 –¥–∏–∞–ª–æ–≥–æ–≤: 70 internal + 30 external
    for (let i = 0; i < 100; i++) {
      const isInternal = i < 70; // –ü–µ—Ä–≤—ã–µ 70 - internal
      const metaType = isInternal ? 'internal' : 'external';
      const channelType = channelTypes[i % 2]; // –ß–µ—Ä–µ–¥—É–µ–º whatsapp –∏ telegram
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è
      const nameBase = isInternal 
        ? dialogNames.internal[i % dialogNames.internal.length]
        : dialogNames.external[(i - 70) % dialogNames.external.length];
      const name = i < 20 ? nameBase : `${nameBase} #${Math.floor(i / 20) + 1}`;
      
      const dialog = await Dialog.create({
        tenantId: tenant._id,
        name,
        createdBy: users[0]._id
      });
      
      dialogs.push({ 
        ...dialog.toObject(), 
        metaType,
        channelType 
      });
    }

    console.log(`‚úÖ Created ${dialogs.length} dialogs`);
    console.log(`   - Internal: ${dialogs.filter(d => d.metaType === 'internal').length}`);
    console.log(`   - External: ${dialogs.filter(d => d.metaType === 'external').length}`);
    console.log(`   - WhatsApp: ${dialogs.filter(d => d.channelType === 'whatsapp').length}`);
    console.log(`   - Telegram: ${dialogs.filter(d => d.channelType === 'telegram').length}`);

    // Create Messages for all dialogs
    const messageTemplates = [
      '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!',
      '–ö–∞–∫ –¥–µ–ª–∞?',
      '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?',
      '–û—Ç–ª–∏—á–Ω–æ!',
      '–°–ø–∞—Å–∏–±–æ!',
      '–ü–æ–Ω—è—Ç–Ω–æ',
      '–°–æ–≥–ª–∞—Å–µ–Ω',
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
      '–•–æ—Ä–æ—à–æ',
      '–î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º',
      '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è!',
      '–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è',
      '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º',
      '–í—Å—ë –ø–æ–Ω—è—Ç–Ω–æ',
      '–ì–æ—Ç–æ–≤–æ!',
      '–†–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ',
      '–û—Ç–ª–∏—á–Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å',
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å',
      '–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞',
      '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'
    ];

    const messageTypes = ['text', 'text', 'text', 'text', 'text', 'system']; // –ë–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const senderIds = ['carl', 'sara', 'john']; // –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ ObjectId
    const allMessages = [];

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    dialogs.forEach((dialog, dialogIndex) => {
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ: –æ—Ç 1 –¥–æ 25 (—Å–ª—É—á–∞–π–Ω–æ)
      const messageCount = Math.floor(Math.random() * 25) + 1;
      
      for (let i = 0; i < messageCount; i++) {
        const randomSenderId = senderIds[Math.floor(Math.random() * senderIds.length)];
        const randomTemplate = messageTemplates[Math.floor(Math.random() * messageTemplates.length)];
        const randomType = messageTypes[Math.floor(Math.random() * messageTypes.length)];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        const messageContent = i === 0 
          ? `–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ "${dialog.name}"`
          : `${randomTemplate} (—Å–æ–æ–±—â–µ–Ω–∏–µ ${i + 1})`;
        
        allMessages.push({
          tenantId: tenant._id,
          dialogId: dialog._id,
          senderId: randomSenderId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
          content: messageContent,
          type: randomType,
        });
      }
    });

    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const messages = await Message.create(allMessages);

    console.log(`‚úÖ Created ${messages.length} messages across ${dialogs.length} dialogs`);
    console.log(`   - Average messages per dialog: ${Math.round(messages.length / dialogs.length)}`);
    console.log(`   - Messages range: 1-25 per dialog`);
    console.log(`   - Sender IDs: carl, sara, john (–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)`);

    // Create Meta
    const metaEntries = [
      // System bot meta
      {
        tenantId: systemTenant._id,
        entityType: 'user',
        entityId: systemBot._id,
        key: 'isBot',
        value: true,
        dataType: 'boolean',
      },
      {
        tenantId: systemTenant._id,
        entityType: 'user',
        entityId: systemBot._id,
        key: 'botType',
        value: 'system',
        dataType: 'string',
      },
      {
        tenantId: systemTenant._id,
        entityType: 'user',
        entityId: systemBot._id,
        key: 'capabilities',
        value: ['notifications', 'system_messages', 'auto_reply'],
        dataType: 'array',
      },
      // Demo tenant meta
      {
        tenantId: tenant._id,
        entityType: 'tenant',
        entityId: tenant._id,
        key: 'plan',
        value: 'premium',
        dataType: 'string',
      },
      {
        tenantId: tenant._id,
        entityType: 'user',
        entityId: users[0]._id,
        key: 'theme',
        value: 'dark',
        dataType: 'string',
        createdBy: users[0]._id,
      },
    ];

    // Add meta for each dialog
    dialogs.forEach((dialog, index) => {
      // Meta type (internal/external)
      metaEntries.push({
        tenantId: tenant._id,
        entityType: 'dialog',
        entityId: dialog._id,
        key: 'type',
        value: dialog.metaType,
        dataType: 'string',
      });

      // Channel type (whatsapp/telegram)
      metaEntries.push({
        tenantId: tenant._id,
        entityType: 'dialog',
        entityId: dialog._id,
        key: 'channelType',
        value: dialog.channelType,
        dataType: 'string',
      });

      // Welcome message
      metaEntries.push({
        tenantId: tenant._id,
        entityType: 'dialog',
        entityId: dialog._id,
        key: 'welcomeMessage',
        value: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "${dialog.name}"!`,
        dataType: 'string',
      });

      // Max participants
      metaEntries.push({
        tenantId: tenant._id,
        entityType: 'dialog',
        entityId: dialog._id,
        key: 'maxParticipants',
        value: dialog.metaType === 'internal' ? 50 : 10,
        dataType: 'number',
      });

      // Features based on type
      const features = dialog.metaType === 'internal' 
        ? ['file_sharing', 'voice_calls', 'video_calls', 'screen_sharing']
        : ['file_sharing', 'voice_calls'];
      
      metaEntries.push({
        tenantId: tenant._id,
        entityType: 'dialog',
        entityId: dialog._id,
        key: 'features',
        value: features,
        dataType: 'array',
      });

      // Security level
      metaEntries.push({
        tenantId: tenant._id,
        entityType: 'dialog',
        entityId: dialog._id,
        key: 'securityLevel',
        value: dialog.metaType === 'internal' ? 'high' : 'medium',
        dataType: 'string',
      });

      // Members - —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–º–µ–Ω
      const availableMembers = ['john', 'sara', 'carl', 'marta', 'kirk'];
      const memberCount = Math.floor(Math.random() * 4) + 2; // 2-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const shuffledMembers = availableMembers.sort(() => 0.5 - Math.random());
      const selectedMembers = shuffledMembers.slice(0, memberCount);
      
      metaEntries.push({
        tenantId: tenant._id,
        entityType: 'dialog',
        entityId: dialog._id,
        key: 'members',
        value: selectedMembers,
        dataType: 'array',
      });
    });

    // Add meta for messages
    messages.forEach((message, index) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º channelType –∏ channelId –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const channelType = index % 2 === 0 ? 'whatsapp' : 'telegram';
      const channelId = channelType === 'whatsapp' ? 'W0000' : 'TG0000';
      
      // Channel type
      metaEntries.push({
        tenantId: tenant._id,
        entityType: 'message',
        entityId: message._id,
        key: 'channelType',
        value: channelType,
        dataType: 'string',
      });

      // Channel ID
      metaEntries.push({
        tenantId: tenant._id,
        entityType: 'message',
        entityId: message._id,
        key: 'channelId',
        value: channelId,
        dataType: 'string',
      });
    });

    const meta = await Meta.create(metaEntries);

    console.log(`‚úÖ Created ${meta.length} meta entries`);
    console.log(`   - Bot metadata: 3`);
    console.log(`   - Tenant metadata: 1`);
    console.log(`   - User metadata: 1`);
    console.log(`   - Dialog metadata: ${dialogs.length * 7} (7 per dialog: type, channelType, welcomeMessage, maxParticipants, features, securityLevel, members)`);
    console.log(`   - Message metadata: ${messages.length * 2} (2 per message: channelType, channelId)`);

    console.log('\nüéâ Database seeding completed successfully!');
    console.log('\nüìä Summary:');
    console.log(`   - Tenants: ${await Tenant.countDocuments()} (1 system + 1 demo)`);
    console.log(`   - Users: ${await User.countDocuments()} (1 system bot + 3 demo users)`);
    console.log(`   - Dialogs: ${await Dialog.countDocuments()} (70 internal + 30 external = 100 total, –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`);
    console.log(`   - Messages: ${await Message.countDocuments()} (${messages.length} total across ${dialogs.length} dialogs)`);
    console.log(`   - Meta: ${await Meta.countDocuments()} (5 system/user/tenant + ${dialogs.length * 7} dialog + ${messages.length * 2} message)`);
    console.log('\nü§ñ System Bot:');
    console.log(`   - Username: ${systemBot.username}`);
    console.log(`   - Email: ${systemBot.email}`);
    console.log(`   - Tenant: ${systemTenant.name} (${systemTenant.domain})`);
    console.log(`   - Capabilities: notifications, system_messages, auto_reply`);
    console.log('\nüí¨ Dialogs breakdown:');
    console.log(`   - By type: 70 internal + 30 external = 100 total`);
    console.log(`   - By channel: 50 WhatsApp + 50 Telegram = 100 total`);
    console.log('\nüì± Test filters:');
    console.log(`   - GET /api/dialogs?filter={"meta":{"type":"internal"}} ‚Üí 70 dialogs`);
    console.log(`   - GET /api/dialogs?filter={"meta":{"type":"external"}} ‚Üí 30 dialogs`);
    console.log(`   - GET /api/dialogs?filter={"meta":{"channelType":"whatsapp"}} ‚Üí 50 dialogs`);
    console.log(`   - GET /api/dialogs?filter={"meta":{"channelType":"telegram"}} ‚Üí 50 dialogs`);
    console.log(`   - GET /api/dialogs?filter={"meta":{"type":"internal","channelType":"whatsapp"}} ‚Üí 35 dialogs`);
    console.log('\nüë• Members filters:');
    console.log(`   - GET /api/dialogs?filter=(meta.members,in,[john]) ‚Üí –¥–∏–∞–ª–æ–≥–∏ —Å john`);
    console.log(`   - GET /api/dialogs?filter=(meta.members,in,[sara,carl]) ‚Üí –¥–∏–∞–ª–æ–≥–∏ —Å sara –∏–ª–∏ carl`);
    console.log(`   - GET /api/dialogs?filter=(meta.members,nin,[kirk]) ‚Üí –¥–∏–∞–ª–æ–≥–∏ –±–µ–∑ kirk`);
    console.log('\nüí¨ Message filters:');
    console.log(`   - GET /api/messages?filter=(meta.channelType,eq,whatsapp) ‚Üí —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ WhatsApp`);
    console.log(`   - GET /api/messages?filter=(meta.channelType,eq,telegram) ‚Üí —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram`);
    console.log(`   - GET /api/messages?filter=(meta.channelId,eq,W0000) ‚Üí —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID W0000`);
    console.log(`   - GET /api/messages?filter=(meta.channelId,eq,TG0000) ‚Üí —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID TG0000`);
    console.log('\n');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    process.exit(1);
  }
}

seed();

