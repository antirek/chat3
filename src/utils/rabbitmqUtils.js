import amqp from 'amqplib';

let connection = null;
let channel = null;
let isConnected = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è RabbitMQ
const RABBITMQ_HOST = process.env.RABBITMQ_HOST || 'localhost';
const RABBITMQ_PORT = process.env.RABBITMQ_PORT || '5672';
const RABBITMQ_USER = process.env.RABBITMQ_USER || 'rmuser';
const RABBITMQ_PASSWORD = process.env.RABBITMQ_PASSWORD || 'rmpassword';
const RABBITMQ_VHOST = process.env.RABBITMQ_VHOST || '/';

// –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
const RABBITMQ_URL = process.env.RABBITMQ_URL || 
  `amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:${RABBITMQ_PORT}${RABBITMQ_VHOST}`;

const EXCHANGE_NAME = process.env.RABBITMQ_EXCHANGE || 'chat3_events';
const EXCHANGE_TYPE = 'topic'; // topic exchange –¥–ª—è –≥–∏–±–∫–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
const QUEUE_NAME = 'chat3_events'; // –ò–º—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
const QUEUE_TTL = 3600000; // TTL 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ
 */
export async function initRabbitMQ() {
  try {
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –ª–æ–≥–∞—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const safeUrl = RABBITMQ_URL.replace(/\/\/.*@/, '//***:***@');
    console.log('üê∞ Connecting to RabbitMQ:', safeUrl);
    
    connection = await amqp.connect(RABBITMQ_URL);
    channel = await connection.createChannel();
    
    // –°–æ–∑–¥–∞–µ–º exchange –¥–ª—è —Å–æ–±—ã—Ç–∏–π
    await channel.assertExchange(EXCHANGE_NAME, EXCHANGE_TYPE, {
      durable: true // Exchange –ø–µ—Ä–µ–∂–∏–≤–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ RabbitMQ
    });
    
    // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å chat3_events —Å TTL 1 —á–∞—Å
    await channel.assertQueue(QUEUE_NAME, {
      durable: true, // –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–∂–∏–≤–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ RabbitMQ
      arguments: {
        'x-message-ttl': QUEUE_TTL // TTL 1 —á–∞—Å (3600000 –º—Å)
      }
    });
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫ exchange —Å routing key '#' (–≤—Å–µ —Å–æ–±—ã—Ç–∏—è)
    await channel.bindQueue(QUEUE_NAME, EXCHANGE_NAME, '#');
    
    isConnected = true;
    console.log('‚úÖ RabbitMQ connected successfully');
    console.log(`   Exchange: ${EXCHANGE_NAME} (${EXCHANGE_TYPE})`);
    console.log(`   Queue: ${QUEUE_NAME} (TTL: 1 hour)`);
    console.log(`   Routing: All events (#) -> ${QUEUE_NAME}`);
    console.log(`   User: ${RABBITMQ_USER}`);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connection.on('error', (err) => {
      console.error('‚ùå RabbitMQ connection error:', err.message);
      isConnected = false;
    });
    
    connection.on('close', () => {
      console.warn('‚ö†Ô∏è  RabbitMQ connection closed');
      isConnected = false;
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        console.log('üîÑ Attempting to reconnect to RabbitMQ...');
        initRabbitMQ();
      }, 5000);
    });
    
    channel.on('error', (err) => {
      console.error('‚ùå RabbitMQ channel error:', err.message);
    });
    
    channel.on('close', () => {
      console.warn('‚ö†Ô∏è  RabbitMQ channel closed');
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå Failed to connect to RabbitMQ:', error.message);
    console.warn('‚ö†Ô∏è  Events will be saved to MongoDB only (RabbitMQ disabled)');
    isConnected = false;
    return false;
  }
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ
 */
export async function closeRabbitMQ() {
  try {
    if (channel) {
      await channel.close();
    }
    if (connection) {
      await connection.close();
    }
    isConnected = false;
    console.log('‚úÖ RabbitMQ connection closed');
  } catch (error) {
    console.error('Error closing RabbitMQ connection:', error.message);
  }
}

/**
 * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –≤ RabbitMQ
 * @param {Object} event - –°–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
 */
export async function publishEvent(event) {
  // –ï—Å–ª–∏ RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false (—Å–æ–±—ã—Ç–∏–µ –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ MongoDB)
  if (!isConnected || !channel) {
    return false;
  }
  
  try {
    const routingKey = generateRoutingKey(event);
    const message = JSON.stringify(event);
    
    const published = channel.publish(
      EXCHANGE_NAME,
      routingKey,
      Buffer.from(message),
      {
        persistent: true, // –°–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–∂–∏–≤—É—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ RabbitMQ
        contentType: 'application/json',
        timestamp: Date.now(),
        headers: {
          eventType: event.eventType,
          entityType: event.entityType,
          tenantId: event.tenantId?.toString(),
        }
      }
    );
    
    if (published) {
      console.log(`üì® Event published to RabbitMQ: ${routingKey}`);
      return true;
    } else {
      console.warn('‚ö†Ô∏è  Failed to publish event to RabbitMQ (buffer full)');
      return false;
    }
  } catch (error) {
    console.error('Error publishing event to RabbitMQ:', error.message);
    return false;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è routing key –¥–ª—è —Å–æ–±—ã—Ç–∏—è
 * –§–æ—Ä–º–∞—Ç: {entityType}.{action}.{tenantId}
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   - dialog.create.tenant123
 *   - message.update.tenant456
 *   - dialog.member.add.tenant123
 */
function generateRoutingKey(event) {
  const entityType = event.entityType || 'unknown';
  const eventType = event.eventType || 'unknown';
  const tenantId = event.tenantId?.toString() || 'unknown';
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ eventType (–Ω–∞–ø—Ä–∏–º–µ—Ä, "create" –∏–∑ "dialog.create")
  const action = eventType.split('.').pop();
  
  return `${entityType}.${action}.${tenantId}`;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
 * @param {string} queueName - –ò–º—è –æ—á–µ—Ä–µ–¥–∏
 * @param {Array<string>} routingKeys - –ú–∞—Å—Å–∏–≤ routing keys –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export async function createQueue(queueName, routingKeys, callback) {
  if (!isConnected || !channel) {
    throw new Error('RabbitMQ is not connected');
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    await channel.assertQueue(queueName, {
      durable: true // –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–∂–∏–≤–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ RabbitMQ
    });
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫ exchange —Å routing keys
    for (const routingKey of routingKeys) {
      await channel.bindQueue(queueName, EXCHANGE_NAME, routingKey);
      console.log(`‚úÖ Queue "${queueName}" bound to pattern: ${routingKey}`);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    await channel.consume(queueName, (msg) => {
      if (msg) {
        try {
          const event = JSON.parse(msg.content.toString());
          callback(event, msg);
          channel.ack(msg); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        } catch (error) {
          console.error('Error processing message:', error);
          channel.nack(msg, false, false); // –û—Ç–∫–ª–æ–Ω—è–µ–º –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        }
      }
    });
    
    console.log(`üëÇ Listening for messages on queue: ${queueName}`);
    return true;
  } catch (error) {
    console.error('Error creating queue:', error.message);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function isRabbitMQConnected() {
  return isConnected;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ RabbitMQ
 */
export function getRabbitMQInfo() {
  return {
    url: RABBITMQ_URL.replace(/\/\/.*@/, '//***:***@'), // –°–∫—Ä—ã–≤–∞–µ–º –∫—Ä–µ–¥—ã
    exchange: EXCHANGE_NAME,
    exchangeType: EXCHANGE_TYPE,
    queue: QUEUE_NAME,
    queueTtl: QUEUE_TTL / 1000, // TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    connected: isConnected,
    user: RABBITMQ_USER
  };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—á–µ—Ä–µ–¥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export function getDefaultQueueName() {
  return QUEUE_NAME;
}

export default {
  initRabbitMQ,
  closeRabbitMQ,
  publishEvent,
  createQueue,
  isRabbitMQConnected,
  getRabbitMQInfo,
  getDefaultQueueName
};
