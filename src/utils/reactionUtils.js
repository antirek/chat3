import mongoose from 'mongoose';
import MessageReaction from '../models/MessageReaction.js';
import Message from '../models/Message.js';

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ —Ä–µ–∞–∫—Ü–∏–π –≤ Message.reactionCounts
 * –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ä–µ–∞–∫—Ü–∏–π –≤ MessageReaction –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export async function updateReactionCounts(tenantId, messageId) {
  try {
    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø—É
    const reactions = await MessageReaction.aggregate([
      {
        $match: {
          tenantId: new mongoose.Types.ObjectId(tenantId),
          messageId: new mongoose.Types.ObjectId(messageId)
        }
      },
      {
        $group: {
          _id: '$reaction',
          count: { $sum: 1 }
        }
      }
    ]);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç { "üëç": 5, "‚ù§Ô∏è": 3 }
    const reactionCounts = {};
    reactions.forEach(reaction => {
      reactionCounts[reaction._id] = reaction.count;
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ Message
    await Message.updateOne(
      { _id: new mongoose.Types.ObjectId(messageId), tenantId: new mongoose.Types.ObjectId(tenantId) },
      { $set: { reactionCounts: reactionCounts } }
    );

    return reactionCounts;
  } catch (error) {
    console.error('Error updating reaction counts:', error);
    throw error;
  }
}

/**
 * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
 */
export async function incrementReactionCount(tenantId, messageId, reaction) {
  try {
    await Message.updateOne(
      { _id: messageId, tenantId: tenantId },
      { $inc: { [`reactionCounts.${reaction}`]: 1 } }
    );
  } catch (error) {
    console.error('Error incrementing reaction count:', error);
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
    await updateReactionCounts(tenantId, messageId);
  }
}

/**
 * –£–º–µ–Ω—å—à–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
 */
export async function decrementReactionCount(tenantId, messageId, reaction) {
  try {
    const message = await Message.findOne({ _id: messageId, tenantId: tenantId });
    if (!message) return;

    const currentCount = message.reactionCounts?.[reaction] || 0;
    
    if (currentCount <= 1) {
      // –£–¥–∞–ª—è–µ–º –∫–ª—é—á, –µ—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 0 –∏–ª–∏ –º–µ–Ω—å—à–µ
      await Message.updateOne(
        { _id: messageId, tenantId: tenantId },
        { $unset: { [`reactionCounts.${reaction}`]: "" } }
      );
    } else {
      // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      await Message.updateOne(
        { _id: messageId, tenantId: tenantId },
        { $inc: { [`reactionCounts.${reaction}`]: -1 } }
      );
    }
  } catch (error) {
    console.error('Error decrementing reaction count:', error);
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
    await updateReactionCounts(tenantId, messageId);
  }
}

